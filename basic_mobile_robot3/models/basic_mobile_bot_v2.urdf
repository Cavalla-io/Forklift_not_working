<?xml version="1.0" ?>
<robot name="basic_mobile_bot" xmlns:xacro="http://ros.org/wiki/xacro">

  <!-- ****************** ROBOT CONSTANTS *******************************  -->
  <!-- Define the size of the robot's main chassis in meters -->
  <xacro:property name="base_width" value="1.0668"/>
  <xacro:property name="base_length" value="2.159"/>
  <xacro:property name="base_height" value="2.7432"/>
	
  <!-- Define the shape of the robot's two back wheels in meters -->
  <xacro:property name="wheel_radius" value="0.21"/>
  <xacro:property name="wheel_width" value="0.2"/>

  <!-- x-axis points forward, y-axis points to left, z-axis points upwards -->
  <!-- Define the gap between the wheel and chassis along y-axis in meters -->
  <xacro:property name="wheel_ygap" value="0.035"/>

  <!-- Position the wheels along the z-axis -->
  <xacro:property name="wheel_zoff" value="0.02"/>

  <!-- Position the wheels along the x-axis -->
  <xacro:property name="wheel_xoff" value="0.421"/>

  <!-- Position the caster wheel along the x-axis -->
  <xacro:property name="caster_xoff" value="0.217"/>

  <!-- Define intertial property macros  -->
  <xacro:macro name="box_inertia" params="m w h d">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}"/>
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="cylinder_inertia" params="m r h">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="sphere_inertia" params="m r">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0" iyy="${(2/5) * m * (r*r)}" iyz="0.0" izz="${(2/5) * m * (r*r)}"/>
    </inertial>
  </xacro:macro>

  <!-- ****************** ROBOT BASE FOOTPRINT ***************************  -->
  <!-- Define the center of the main robot chassis projected on the ground -->	
  <link name="base_footprint"/>

  <!-- The base footprint of the robot is located underneath the chassis -->
  <joint name="base_joint" type="fixed">
    <parent link="base_footprint"/>
    <child link="base_link" />
    <origin xyz="0.0 0.0 ${(wheel_radius+wheel_zoff)}" rpy="0 0 0"/>
  </joint>

  <!-- ********************** ROBOT BASE *********************************  -->
  <link name="base_link">
    <visual>
      <origin xyz="-1.0795 -0.5334 0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="package://basic_mobile_robot3/meshes/base_link.dae" />
      </geometry>
      <material name="Red">
        <color rgba="${255/255} ${0/255} ${0/255} 1.0"/>
      </material>
    </visual>

    <collision>
    <origin xyz="0 0 1.3716" rpy="0 0 0" />
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
    </collision>

    <inertial>
      <mass value="500"/>
      <inertia ixx="206" ixy="0" ixz="-23" iyy="389" iyz="0" izz="316"/>
    </inertial>
    
  </link>

  <gazebo reference="base_link">
    <material>Gazebo/Red</material>
  </gazebo>

  <!-- *********************** DRIVE WHEELS ******************************  -->

  <xacro:macro name="wheel" params="prefix x_reflect y_reflect">
    <link name="${prefix}_link">
      <visual>
        <origin xyz="0 0 0" rpy="1.5707963267949 0 0"/>
        <geometry>
            <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
        <material name="White">
          <color rgba="${255/255} ${255/255} ${255/255} 1.0"/>
        </material>
      </visual>
      
      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
      </collision>
      
      <xacro:cylinder_inertia m="5.5" r="${wheel_radius}" h="${wheel_width}"/>
      
    </link>

    <!-- Connect the wheels to the base_link at the appropriate location, and 
         define a continuous joint to allow the wheels to freely rotate about
         an axis -->
  </xacro:macro>

  <!-- Instantiate two wheels using the macro we just made through the 
       xacro:wheel tags. We also define the parameters to have one wheel
       on both sides at the back of our robot (i.e. x_reflect=-1). -->
  <xacro:wheel prefix="drivewhl_l" x_reflect="-1" y_reflect="1" />
  <xacro:wheel prefix="drivewhl_r" x_reflect="-1" y_reflect="-1" />
  <xacro:wheel prefix="drivewhl_fl" x_reflect="1" y_reflect="1" />
  <xacro:wheel prefix="drivewhl_fr" x_reflect="1" y_reflect="-1" />
 
  <!-- *********************** CASTER WHEEL ******************************  -->
  <!-- We add a caster wheel. It will be modeled as sphere.
       We define the wheelâ€™s geometry, material and the joint to connect it to 
       base_link at the appropriate location. -->



  
  <!-- *********************** IMU SETUP *********************************  -->
  <!-- Each sensor must be attached to a link.                              --> 

  <joint name="drivewhl_l_joint" type="continuous">
    <parent link="base_link"/>
    <child link="drivewhl_l_link"/>
    <limit 
      velocity="10"
      effort="1000"
    />
    <origin xyz="-0.7502 0.5684 0.2032"/>
    <axis xyz="0 1 0"/>
  </joint>

  <joint name="drivewhl_r_joint" type="continuous">
    <parent link="base_link"/>
    <child link="drivewhl_r_link"/>
    <limit 
      velocity="10"
      effort="1000"
    />
    <origin xyz="-0.7502 -0.5684 0.2032"/>
    <axis xyz="0 1 0"/>
  </joint>

  <joint name="drivewhl_fl_joint" type="continuous">
    <parent link="base_link"/>
    <child link="drivewhl_fl_link"/>
    <limit 
      velocity="10"
      effort="1000"
    />
    <origin xyz="0.6722 0.5684 0.2032"/>
    <axis xyz="0 1 0"/>
  </joint>

  <joint name="drivewhl_fr_joint" type="continuous">
    <parent link="base_link"/>
    <child link="drivewhl_fr_link"/>
    <limit 
      velocity="10"
      effort="1000"
    />
    <origin xyz="0.6722 -0.5684 0.2032"/>
    <axis xyz="0 1 0"/>
  </joint>

  <!-- <link name="front_caster">
    <visual>
      <geometry>
        <sphere radius="0.2"/>
      </geometry>
      <material name="White">
        <color rgba="${255/255} ${255/255} ${255/255} 1.0"/>
      </material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <sphere radius="0.2"/>
      </geometry>
    </collision>
    <xacro:sphere_inertia m="10.05" r="0.2"/>
  </link> -->

  <gazebo reference="front_caster">
    <mu1>0.01</mu1>
    <mu2>0.01</mu2>
    <material>Gazebo/White</material>
  </gazebo>

  <!-- <joint name="caster_joint" type="fixed">
    <parent link="base_link"/>
    <child link="front_caster"/>
    <origin xyz="0.4 0.0 0.1" rpy="0 0 0"/>
  </joint> -->


  <joint name="imu_joint" type="fixed">
    <parent link="base_link"/>
    <child link="imu_link"/>
    <origin xyz="-0.10 0 0.05" rpy="0 0 0"/>
  </joint>

  <link name="imu_link"/>

  <!-- *********************** GPS SETUP **********************************  -->
  <joint name="gps_joint" type="fixed">
    <parent link="base_link"/>
    <child link="gps_link"/>
    <origin xyz="0.10 0 0.05" rpy="0 0 0"/>
  </joint>

  <link name="gps_link"/>
  
  <!-- *********************** LIDAR SETUP **********************************  -->
  <joint name="lidar_joint" type="fixed">
    <parent link="base_link"/>
    <child link="lidar_link"/>
    <origin xyz="0.215 0 0.13" rpy="0 0 0"/>
  </joint>

  <link name="lidar_link">
  
    <collision>
     <origin xyz="0 0 0" rpy="0 0 0"/>
     <geometry>
      <cylinder radius="0.0508" length="0.18"/>
     </geometry>
    </collision>
    
    <visual>
     <origin xyz="0 0 0" rpy="0 0 0"/>
     <geometry>
      <cylinder radius="0.0508" length="0.18"/>
     </geometry>
     <material name="Black">
          <color rgba="${0/255} ${0/255} ${0/255} 1.0"/>
     </material>
    </visual>
    
    <inertial>
      <mass value="0.114" />
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001" />
    </inertial>
  </link>

  <link name="fork">
    <visual>
      <geometry>
        <mesh filename="package://basic_mobile_robot3/meshes/fork.dae"/> 
      </geometry>
    </visual>
    <collision>
      <geometry>
        <mesh filename="package://basic_mobile_robot3/meshes/fork.dae"/> 
      </geometry>
    </collision>
    <inertial>
      <mass value="10"/>
      <inertia ixx="0.2" ixy="0" ixz="0" iyy="0.3" iyz="0" izz="0.4"/>
    </inertial>
  </link>

  <joint name="base_to_fork" type="prismatic">
    <parent link="base_link"/>
    <child link="fork"/>
    <limit 
      lower="0" 
      upper="2" 
      velocity="0.1"
      effort="100"
    />
    <origin xyz="1.0795 -0.3686 0.0"/>
    <axis xyz="0 0 1"/>
  </joint> 

  <gazebo>
    <plugin name="gazebo_ros2_control" filename="libgazebo_ros2_control.so">
      <ros2_control_plugin>gazebo_ros2_control/DefaultRobotHWSim</ros2_control_plugin>
      <robot_param_namespace></robot_param_namespace>
      <robot_sim_type>gazebo_ros2_control/DefaultRobotHWSim</robot_sim_type>
      <parameters>$(find basic_mobile_robot3)/config/prismatic_joint_controller.yaml</parameters>
    </plugin>
  </gazebo>



  <!-- CAMERA-->
  <link name='rgb_cam_camera_link'>
      <visual>
          <origin xyz="0 0 0" rpy="0 0 0"/>
          <geometry>
              <box size="0.02 0.04 0.01"/>
          </geometry>
      </visual>
  </link>

  <joint name="rgb_cam_camera_link_joint" type="fixed">
      <origin rpy="0 0 0" xyz="0.04 0.0 0.5"/>
      <parent link="base_link"/>
      <child link="rgb_cam_camera_link"/>
  </joint>

  <link name="rgb_cam_camera_link_frame">
  </link>

  <joint name="rgb_cam_camera_frame_joint" type="fixed">
      <origin xyz="0.01 0 0" rpy="0 0 0" />
      <parent link="rgb_cam_camera_link" />
      <child link="rgb_cam_camera_link_frame" />
      <axis xyz="0 0 0"/>
  </joint>
    

  <gazebo reference="rgb_cam_camera_link_frame">
    <sensor type="camera" name="rgb_cam">
      <always_on>1</always_on>
      <update_rate>10.0</update_rate>
      <camera name="rgb_cam">
          <pose>0 0 0 0 0 0</pose>
          <horizontal_fov>1.3962634</horizontal_fov>
          <image>
            <width>640</width>
            <height>480</height>
            <format>R8G8B8</format>
          </image>
          <clip>
              <near>0.005</near>
              <far>20.0</far>
          </clip>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
          <alwaysOn>true</alwaysOn>
          <updateRate>0.0</updateRate>
          <cameraName>rgb_cam</cameraName>
          <imageTopicName>image_raw</imageTopicName>
          <cameraInfoTopicName>camera_info</cameraInfoTopicName>
          <frameName>rgb_cam_camera_link_frame</frameName>
          <hackBaseline>0.07</hackBaseline>
          <distortionK1>0.0</distortionK1>
          <distortionK2>0.0</distortionK2>
          <distortionK3>0.0</distortionK3>
          <distortionT1>0.0</distortionT1>
          <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo> 

</robot>
