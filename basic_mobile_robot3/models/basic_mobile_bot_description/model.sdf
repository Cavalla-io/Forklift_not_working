<?xml version="1.0" ?>
<sdf version="1.5">
  <model name="basic_mobile_bot">  
  <static>false</static>

  <!-- ****************** ROBOT BASE FOOTPRINT ***************************  -->
  <pose>0.0 0.0 0.0 0.0 0.0 0.0</pose>
  <link name="base_footprint"/>

  <!-- ********************** ROBOT BASE *********************************  -->
  <link name="base_link">

    <collision name="base_collision">
      <pose>0 0 1.3716 0 0 0</pose>
      <geometry>
        <box>
          <size>2.159 1.0668 2.7432</size>
        </box>
      </geometry>
    </collision>

    <visual name="base_visual">
      <pose>-1.0795 -0.5334 0 0 0 0</pose>
      <geometry>
        <mesh>
          <uri>model://basic_mobile_bot_description/meshes/base_link.dae</uri>
          <scale>1.0 1.0 1.0</scale>
        </mesh>
      </geometry>
      <material>
        <ambient>1.0 0.0 0.0 1.0</ambient>
        <diffuse>1.0 0.0 0.0 1.0</diffuse>
        <specular>0.0 0.0 0.0 1.0</specular>
        <emissive>0.0 0.0 0.0 1.0</emissive>
      </material>
    </visual>
  </link>

  <!-- *********************** IMU SENSOR SETUP **************************  -->
  <link name="imu_link">
    <gravity>true</gravity>
    <sensor name="bmb_imu" type="imu">
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <imu>
        <orientation>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-3</stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-3</stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-3</stddev>
            </noise>
          </z>
        </orientation>
        <angular_velocity>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
            </noise>
          </z>
        </angular_velocity>
        <linear_acceleration>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
            </noise>
          </z>
        </linear_acceleration>
      </imu>
      <plugin name="basic_mobile_bot_imu" filename="libgazebo_ros_imu_sensor.so">
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
        <frame_name>imu_link</frame_name>
        <ros>
          <namespace>/imu</namespace>
          <remapping>~/out:=data</remapping>
        </ros>
      </plugin>
    </sensor>
  </link>

  <!-- *********************** GPS SETUP *********************************  -->
  <link name="gps_link">
    <sensor name="bmb_gps" type="gps">
      <always_on>true</always_on>
      <update_rate>10.0</update_rate>
      <gps>
        <position_sensing>
          <horizontal>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1e-2</stddev>
            </noise>
          </horizontal>
          <vertical>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1</stddev>
            </noise>
          </vertical>
        </position_sensing>
      </gps>
      <plugin name="basic_mobile_bot_gps" filename="libgazebo_ros_gps_sensor.so">
        <ros>
          <remapping>~/out:=gps/fix</remapping>
        </ros>
      </plugin>
    </sensor>
  </link>

  <!-- ****************************** LIDAR *****************************    -->
  <link name="lidar_link">    
    <inertial>
      <pose>1.6 0 0.2 0 0 0</pose>
      <inertia>
        <ixx>0.001</ixx>
        <ixy>0.000</ixy>
        <ixz>0.000</ixz>
        <iyy>0.001</iyy>
        <iyz>0.000</iyz>
        <izz>0.001</izz>
      </inertia>
      <mass>0.114</mass>
    </inertial>

    <collision name="lidar_collision">
      <pose>1.6 0 0.2 0 0 0</pose>
      <geometry>
        <cylinder>
          <radius>0.0508</radius>
          <length>0.18</length>
        </cylinder>
      </geometry>
    </collision>

    <visual name="lidar_visual">
      <pose>1.6 0 0.2 0 0 0</pose>
      <geometry>
        <cylinder>
          <radius>0.0508</radius>
          <length>0.18</length>
        </cylinder>
      </geometry>
      <material>
        <ambient>0.0 0.0 0.0 1.0</ambient>
        <diffuse>0.0 0.0 0.0 1.0</diffuse>
        <specular>0.0 0.0 0.0 1.0</specular>
        <emissive>0.0 0.0 0.0 1.0</emissive>
      </material>
    </visual>

    <sensor name="lidar" type="ray">
      <pose>1.6 0 0.2 0 0 0</pose>
      <always_on>true</always_on>
      <visualize>true</visualize>
      <update_rate>5</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>120</samples>
            <resolution>1.000000</resolution>
            <min_angle>-2.3</min_angle>
            <max_angle>2.3</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.3</min>
          <max>20.0</max>
          <resolution>0.015</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="scan" filename="libgazebo_ros_ray_sensor.so">
        <ros>
          <remapping>~/out:=scan</remapping>
        </ros>
        <output_type>sensor_msgs/LaserScan</output_type>
        <frame_name>lidar_link</frame_name>
      </plugin>
    </sensor>
  </link>


  <!-- ********************** CAMERA ********************************** -->
   <!-- Optical frame link, typically used for aligning the camera's frame in ROS -->
  <link name="camera_link_optical">
    <!-- No visual or collision geometry is necessary unless specifically desired -->
  </link>

  <!-- Joint connecting the camera link to the base_link or wherever it's attached -->
  <joint name="camera_joint" type="fixed">
    <parent>base_link</parent> <!-- Adjust as necessary to the correct parent link -->
    <child>camera_link</child>
    <pose frame=''>30 0 0.25 0 0 0</pose> <!-- Position and orientation relative to the parent link -->
  </joint>

  <!-- Joint for the optical frame, aligning it as needed for ROS compatibility -->
  <joint name="camera_optical_joint" type="fixed">
    <parent>camera_link</parent>
    <child>camera_link_optical</child>
    <pose>0 0 0 -1.5707 0 -1.5707</pose> <!-- Adjust the pose for correct optical alignment -->
  </joint>

  <!-- Camera sensor definition within the camera_link -->
  <link name="camera_link">
    <sensor name="rgb_cam" type="camera">
      <pose frame=''>1 0 0.6 0 0 0</pose> <!-- Pose relative to the link it's attached to -->
      <camera>
        <horizontal_fov>1.089</horizontal_fov>
        <image>
          <width>640</width>
          <height>480</height>
        </image>
        <clip>
          <near>0.05</near>
          <far>40</far>
        </clip>
      </camera>
      <update_rate>10.0</update_rate>
      <visualize>true</visualize>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <always_on>true</always_on>
        <update_rate>0.0</update_rate>
        <cameraName>camera</cameraName>
        <frameName>camera_link_optical</frameName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
        <!-- Additional plugin parameters as needed -->
      </plugin>
    </sensor>
  </link>
  
  <!-- *********************** DRIVE WHEELS ******************************  -->
    <joint name="drivewhl_l_joint" type="revolute">
    <pose relative_to='base_link'>-0.7502 0.5684 0.1032 0 -0 0</pose>
    <parent>base_link</parent>
    <child>drivewhl_l_link</child>
    <axis>
      <xyz>0 1 0</xyz>
        <limit>
          <effort>1000</effort>
          <velocity>10</velocity>
          <lower>-1e+16</lower>
          <upper>1e+16</upper>
        </limit>
        <dynamics>
          <spring_reference>0</spring_reference>
          <spring_stiffness>0</spring_stiffness>
        </dynamics>
    </axis>
  </joint>

  <joint name="drivewhl_r_joint" type="revolute">
    <pose relative_to='base_link'>-0.7502 -0.5684 0.1032 0 -0 0</pose>
    <parent>base_link</parent>
    <child>drivewhl_r_link</child>
    <axis>
      <xyz>0 1 0</xyz>
    </axis>
  </joint>


  <joint name="drivewhl_fl_joint" type="revolute">
    <pose relative_to='base_link'>0.6722 0.5684 0.1032 0 -0 0</pose>
    <parent>base_link</parent>
    <child>drivewhl_fl_link</child>
    <axis>
      <xyz>0 1 0</xyz>
    </axis>
  </joint>

  <joint name="drivewhl_fr_joint" type="revolute">
   <pose relative_to='base_link'>0.6722 -0.5684 0.1032 0 -0 0</pose>
    <parent>base_link</parent>
    <child>drivewhl_fr_link</child>
    <axis>
      <xyz>0 1 0</xyz>
    </axis>
  </joint>  

  
  
  <link name="drivewhl_l_link">
    <pose >-0.7502 0.5684 0.1032 1.5707963267949 0 0 </pose>
    
    <collision name="drivewhl_l_collision">
      <geometry>
        <sphere>
          <radius>0.2</radius>
        </sphere>
      </geometry>
    </collision>

    <visual name="drivewhl_l_visual">
      <geometry>
        <cylinder>
          <radius>0.2</radius>
          <length>0.2</length>
        </cylinder>
      </geometry>
    </visual>
  </link>

  <link name="drivewhl_r_link">
    <pose >-0.7502 -0.5684 0.1032 1.5707963267949 -0 0</pose>
    
    <collision name="drivewhl_r_collision">
      <geometry>
        <sphere>
          <radius>0.2</radius>
        </sphere>
      </geometry>
    </collision>

    <visual name="drivewhl_r_visual">
      <geometry>
        <cylinder>
          <radius>0.2</radius>
          <length>0.2</length>
        </cylinder>
      </geometry>
    </visual>
  </link>

  <link name="drivewhl_fr_link">
    <pose >0.6722 -0.5684 0.1032 1.5707963267949 -0 0</pose>
    
    <collision name="drivewhl_fr_collision">
      <geometry>
        <sphere>
          <radius>0.2</radius>
        </sphere>
      </geometry>
    </collision>

    <visual name="drivewhl_fr_visual">
      <geometry>
        <cylinder>
          <radius>0.2</radius>
          <length>0.2</length>
        </cylinder>
      </geometry>
    </visual>
  </link>

  <link name="drivewhl_fl_link">
    <pose >0.6722 0.5684 0.1032 1.5707963267949 0 0</pose>
    
    <collision name="drivewhl_fl_collision">
      <geometry>
        <sphere>
          <radius>0.2</radius>
        </sphere>
      </geometry>
    </collision>

    <visual name="drivewhl_fl_visual">
      <geometry>
        <cylinder>
          <radius>0.2</radius>
          <length>0.2</length>
        </cylinder>
      </geometry>
    </visual>
  </link>


  <!-- ******************* FORK *********************** -->

  <link name='fork'>
      <pose relative_to='base_to_fork'>0 0 0 0 -0 0</pose>
      <inertial>
        <pose>0 0 0 0 -0 0</pose>
        <mass>10</mass>
        <inertia>
          <ixx>0.2</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>0.3</iyy>
          <iyz>0</iyz>
          <izz>0.4</izz>
        </inertia>
      </inertial>
      <collision name='fork_collision'>
        <pose>0 0 0 0 -0 0</pose>
        <geometry>
          <mesh>
            <scale>1 1 1</scale>
            <uri>model://basic_mobile_bot_description/meshes/fork.dae</uri>
          </mesh>
        </geometry>
      </collision>
      <visual name='fork_visual'>
        <pose>0 0 0 0 -0 0</pose>
        <geometry>
          <mesh>
            <scale>1 1 1</scale>
            <uri>model://basic_mobile_bot_description/meshes/fork.dae</uri>
          </mesh>
        </geometry>
      </visual>
    </link>
    <joint name='base_to_fork' type='prismatic'>
      <pose relative_to='base_link'>1.0795 -0.3686 0 0 -0 0</pose>
      <parent>base_link</parent>
      <child>fork</child>
      <axis>
        <xyz>0 0 1</xyz>
        <limit>
          <lower>0</lower>
          <upper>2</upper>
          <effort>100</effort>
          <velocity>0.1</velocity>
        </limit>
        <dynamics>
          <spring_reference>0</spring_reference>
          <spring_stiffness>0</spring_stiffness>
        </dynamics>
      </axis>
    </joint>

   <plugin name="gazebo_ros2_control" filename="libgazebo_ros2_control.so">
    <ros2_control_plugin>gazebo_ros2_control/GazeboSystem</ros2_control_plugin>
    <robot_namespace>/</robot_namespace>
    <control_period>0.001</control_period>
    <parameter_file>$(find basic_mobile_robot3)/config/ros2_control_config.yaml</parameter_file>
    <robot_sim_type>gazebo_ros2_control/GazeboSystem</robot_sim_type>
  </plugin>


  <!-- *********************** CASTER WHEEL ******************************  -->
  <!-- <link name='front_caster'>
    <pose>0.4 0 0.1 0 0 0</pose>
    <inertial>
      <inertia>
        <ixx>0.001</ixx>
        <ixy>0.000</ixy>
        <ixz>0.000</ixz>
        <iyy>0.001</iyy>
        <iyz>0.000</iyz>
        <izz>0.001</izz>
      </inertia>
      <mass>10.0</mass>
    </inertial>
    <collision name='collision'>
      <geometry>
        <sphere>
          <radius>0.2</radius>
        </sphere>
      </geometry>
      <surface>
        <friction>
          <ode>
            <mu>0.01</mu>
            <mu2>0.01</mu2>
            <slip1>1.0</slip1>
            <slip2>1.0</slip2>
          </ode>
        </friction>
      </surface>
    </collision>
    <visual name="front_caster_visual">
      <geometry>
        <sphere>
          <radius>0.2</radius>
        </sphere>
      </geometry>
    </visual>
  </link> -->

  <!-- ************************ JOINTS ***********************************  -->
  <!-- Pose of the joint is the same as the child link frame -->
  <!-- Axis is the axis of rotation relative to the child link frame -->
  
  <joint name="base_joint" type="fixed">
    <parent>base_footprint</parent>
    <child>base_link</child>
    <pose>0 0 0 0 0 0</pose>
  </joint>


  <!-- <joint name='caster_joint' type='revolute'>
    <parent>base_link</parent>
    <child>front_caster</child>
    <pose>0 0 0 0 0 0</pose>
  </joint> -->

  <joint name="imu_joint" type="fixed">
    <parent>base_link</parent>
    <child>imu_link</child>
    <pose>0 0 0 0 0 0</pose>
  </joint>  

  <joint name="gps_joint" type="fixed">
    <parent>base_link</parent>
    <child>gps_link</child>
    <pose>0 0 0 0 0 0</pose>
  </joint>  
  
  <joint name="lidar_joint" type="fixed">
    <parent>base_link</parent>
    <child>lidar_link</child>
    <pose>0 0 0 0 0 0</pose>
  </joint>

 <!-- *********************** WHEEL ODOMETRY ***************************    -->
  <plugin name="basic_mobile_bot_diff_drive" filename="libgazebo_ros_diff_drive.so">

    <update_rate>30</update_rate>
    <num_wheel_pairs>2</num_wheel_pairs>
    <!-- wheels -->
    <left_joint>drivewhl_l_joint</left_joint>
    <left_joint>drivewhl_fl_joint</left_joint>
    <right_joint>drivewhl_r_joint</right_joint>
    <right_joint>drivewhl_fr_joint</right_joint>
    <!-- kinematics -->
    <wheel_separation>1.1368</wheel_separation>
    <wheel_diameter>0.4</wheel_diameter>

    <!-- limits -->
    <max_wheel_torque>100</max_wheel_torque>
    <max_wheel_acceleration>2.0</max_wheel_acceleration>

    <!-- Receive velocity commands on this ROS topic -->
    <command_topic>cmd_vel</command_topic>

    <!-- output -->
    <!-- When false, publish no wheel odometry data to a ROS topic -->
    <publish_odom>true</publish_odom>

    <!-- When true, publish coordinate transform from odom to base_footprint -->
    <!-- I usually use the robot_localization package to publish this transform -->   
    <publish_odom_tf>false</publish_odom_tf>
    
    <!-- When true, publish coordinate transform from base_link to the wheels -->
    <!-- The robot_state_publisher package is often used to publish this transform -->   
    <publish_wheel_tf>false</publish_wheel_tf>

    <odometry_topic>odom</odometry_topic>
    <odometry_frame>odom</odometry_frame>
    <robot_base_frame>base_footprint</robot_base_frame>

    <!-- Odometry source, 0 for ENCODER, 1 for WORLD, defaults to WORLD -->
    <odometry_source>0</odometry_source>

    <!-- Change the ROS topic we will publish the odometry data to -->
    <ros>
      <remapping>odom:=wheel/odometry</remapping>
    </ros>

  </plugin>

 <!-- *********************** JOINT STATE PUBLISHER *********************   -->
  
  <plugin name="basic_mobile_bot_joint_state" filename="libgazebo_ros_joint_state_publisher.so">
    <ros>
      <remapping>~/out:=joint_states</remapping>
    </ros>
    <update_rate>30</update_rate>
    <joint_name>drivewhl_l_joint</joint_name>
    <joint_name>drivewhl_r_joint</joint_name>
    <joint_name>drivewhl_fl_joint</joint_name>
    <joint_name>drivewhl_fr_joint</joint_name>   
    <joint_name>base_to_fork</joint_name>  
  </plugin>   
  
  </model>
</sdf>
